scala> val x=10
x: Int = 10

scala> var x=10
x: Int = 10

scala> val x:int=10
             ^
       error: not found: type int

scala> val x:Int=10
x: Int = 10

variables and expressions:

scala> val avg={
     | val m1=10
     | val m2=20
     | val m3=30
     | (m1+m2+m3)/3.toFloat
     | }
avg: Float = 20.0

scala> val v={val a=5;{val b=a*10;{val c=b/2;c;}}}
v: Int = 25

Tuples:
scala> val (name
     | :String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
       :String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
              ^
On line 2: error: ')' expected but ';' found.
       :String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
                                ^
On line 2: error: ';' expected but ')' found.

scala> val (name:String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
                       ^
       error: ')' expected but ';' found.
                                         ^
       error: ';' expected but ')' found.

scala> val (name:String,age:Int,sal:Float)=Tuple3("XYZ",20,30000.45);
                                    ^
       error: scrutinee is incompatible with pattern type;
        found   : Float
        required: Double

scala> val (name:String,age:Int,sal:Float)=Tuple3("XYZ",20,30000f);
name: String = XYZ
age: Int = 20
sal: Float = 30000.0

scala> val (name:String,age:Int,sal:Float)=("XYZ",20,30000f);
name: String = XYZ
age: Int = 20
sal: Float = 30000.0

scala> val (name,age,sal)=("XYZ",20,30000f);
name: String = XYZ
age: Int = 20
sal: Float = 30000.0

scala> val items=(10,20,30)
items: (Int, Int, Int) = (10,20,30)

scala> items._1
res0: Int = 10

scala> items._4
             ^
       error: value _4 is not a member of (Int, Int, Int)

scala> items._3
res2: Int = 30

scala> val(x,y,z)=items
x: Int = 10
y: Int = 20
z: Int = 30

scala> items
res3: (Int, Int, Int) = (10,20,30)

Multiline 
+++++++++
scala> val multiline=
     | "This is next line "
multiline: String = "This is next line "

scala> val oops
     |
     |
You typed two blank lines.  Starting a new command.

scala> val x-10
     |
     |
You typed two blank lines.  Starting a new command.

scala> val x=10
x: Int = 10

scala> val y=2-
              ^
       error: ambiguous reference to overloaded definition,
       both method - in class Int of type (x: Char)Int
       and  method - in class Int of type (x: Byte)Int
       match expected type ?

scala> val y=20
y: Int = 20

scala> val z=x+y
z: Int = 30

scala> val z=x
z: Int = 10

scala> +y
res4: Int = 20

scala> val z=(x
     | +
     | y)
z: Int = 30

Welcome to Scala 2.13.1 (Java HotSpot(TM) 64-Bit Server VM, Java 13).
Type in expressions for evaluation. Or try :help.

scala> int x=10;
       ^
       error: not found: value int
           ^
       error: postfix operator x needs to be enabled
       by making the implicit value scala.language.postfixOps visible.
       This can be achieved by adding the import clause 'import scala.language.postfixOps'
       or by setting the compiler option -language:postfixOps.
       See the Scaladoc for value scala.language.postfixOps for a discussion
       why the feature needs to be explicitly enabled.

scala> val x=10
x: Int = 10

scala> var x=10
x: Int = 10

scala> val x:int=10
             ^
       error: not found: type int

scala> val x:Int=10
x: Int = 10

scala> val avg={
     | val m1=10
     | val m2=20
     | val m3=30
     | (m1+m2+m3)/3.toFloat
     | }
avg: Float = 20.0

scala> val v={val a=5;{val b=a*10;{val c=b/2;c;}}}
v: Int = 25

scala> val (name
     | :String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
       :String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
              ^
On line 2: error: ')' expected but ';' found.
       :String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
                                ^
On line 2: error: ';' expected but ')' found.

scala> val (name:String;age:Int;sal:Float)=Tuple3("XYZ",20,30000.45);
                       ^
       error: ')' expected but ';' found.
                                         ^
       error: ';' expected but ')' found.

scala> val (name:String,age:Int,sal:Float)=Tuple3("XYZ",20,30000.45);
                                    ^
       error: scrutinee is incompatible with pattern type;
        found   : Float
        required: Double

scala> val (name:String,age:Int,sal:Float)=Tuple3("XYZ",20,30000f);
name: String = XYZ
age: Int = 20
sal: Float = 30000.0

scala> val (name:String,age:Int,sal:Float)=("XYZ",20,30000f);
name: String = XYZ
age: Int = 20
sal: Float = 30000.0

scala> val (name,age,sal)=("XYZ",20,30000f);
name: String = XYZ
age: Int = 20
sal: Float = 30000.0

scala> val items=(10,20,30)
items: (Int, Int, Int) = (10,20,30)

scala> items._1
res0: Int = 10

scala> items._4
             ^
       error: value _4 is not a member of (Int, Int, Int)

scala> items._3
res2: Int = 30

scala> val(x,y,z)=items
x: Int = 10
y: Int = 20
z: Int = 30

scala> items
res3: (Int, Int, Int) = (10,20,30)

scala>

scala> val multiline=
     | "This is next line "
multiline: String = "This is next line "

scala> val oops
     |
     |
You typed two blank lines.  Starting a new command.

scala> val x-10
     |
     |
You typed two blank lines.  Starting a new command.

scala> val x=10
x: Int = 10

scala> val y=2-
              ^
       error: ambiguous reference to overloaded definition,
       both method - in class Int of type (x: Char)Int
       and  method - in class Int of type (x: Byte)Int
       match expected type ?

scala> val y=20
y: Int = 20

scala> val z=x+y
z: Int = 30

scala> val z=x
z: Int = 10

scala> +y
res4: Int = 20

scala> val z=(x
     | +
     | y)
z: Int = 30

scala> val z=(x+y)
z: Int = 30

scala> val x=100
x: Int = 100

scala> x.getClass
res5: Class[Int] = int

scala> x.getClass.getName
res6: String = int

scala> x!=11
res7: Boolean = true

scala> x==10
res8: Boolean = false

scala> x==100
res9: Boolean = true

scala> x.hashcode
         ^
       error: value hashcode is not a member of Int
       did you mean hashCode?

scala> x.hashCode
res11: Int = 100

scala> x.##
res12: Int = 100

scala> x.isInstanceOf[Int]
res13: Boolean = true

scala> x.asInstanceOf[Int]
res14: Int = 100

scala> x.asInstanceOf[Long]
res15: Long = 100

scala> x.asInstanceOf(char)
                     ^
       error: T0 does not take parameters

scala> x.asInstanceOf(Char)
                     ^
       error: T0 does not take parameters

scala> x.asInstanceOf(Boolean)
                     ^
       error: T0 does not take parameters

scala> x.asInstanceOf(Char)
                     ^
       error: T0 does not take parameters

scala> x.asInstanceOf[Char]
res20: Char = d

scala> x.asInstanceOf[Boolean]
java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.Boolean (java.lang.Integer and java.lang.Boolean are in module java.base of loader 'bootstrap')
  at scala.runtime.BoxesRunTime.unboxToBoolean(BoxesRunTime.java:83)
  ... 28 elided

scala> x.
     |
     |
You typed two blank lines.  Starting a new command.

scala> x.getClass
res23: Class[Int] = int

scala> x.getClass.getName
res25: String = int

scala> x.equals(10)
res26: Boolean = false

scala> x.toString
res27: String = 100

scala> val x=$
             ^
       error: not found: value $

scala> val $=10
$: Int = 10

scala> $
res28: Int = 10

scala> val 1word=10
           ^
       error: Invalid literal number

scala> val word1=10
word1: Int = 10

scala> val a.b=10
           ^
       error: not found: value a

scala> val 'a.b'=10
           ^
       warning: symbol literal is deprecated; use Symbol("a") instead
             ^
       error: '=' expected but '.' found.

scala> val `a.B`=10
a.B: Int = 10

scala> a.B
       ^
       error: not found: value a

scala> `a.B`
res30: Int = 10

scala> println("Hello World");
Hello World

scala> println ("Hello \b\b\b World");
Hel World

scala> println("Hello \t\t World");
Hello            World

scala> println("Hello \n World);
               ^
       error: unclosed string literal

scala> println("Hello \n World)";
                                ^
       error: ')' expected but ';' found.

scala> println("Hello \n World");
Hello
 World

scala> println("Hello \f World");
Hello  World

scala> println("Hello \r World");
 World

scala> println("Hello \" World"\");
                                ^
       error: unclosed string literal

scala> println("Hello \" World\"");
Hello " World"

scala> println("Don\'t Go");
Don't Go

scala> println("http:\\\\online")
http:\\online

scala> var flag=true
flag: Boolean = true

scala> var flag:Boolean=false
flag: Boolean = false

scala> var isTrue=!true
     | ;
       ;
       ^
On line 2: error: '=' expected but ';' found.

scala> var flag:Boolean=12
                        ^
       error: type mismatch;
        found   : Int(12)
        required: Boolean

scala> var isTrue!true
     | ;
       ;
       ^
On line 2: error: '=' expected but ';' found.

scala> var isTrue=!true
     |
     |
You typed two blank lines.  Starting a new command.

scala> val isTrue=!true
     |
     |
You typed two blank lines.  Starting a new command.

scala> val isTrue = !true
isTrue: Boolean = false

scala> val isFalse= !true
isFalse: Boolean = false

scala> isFalse
res40: Boolean = false

scala> val unequals= (5!=6)
unequals: Boolean = true

scala> val isLess= (5<6)
isLess: Boolean = true

scala> val unequalAndLess= unequal
                           ^
       error: not found: value unequal

scala> val unequalAndLess= unequal & isLess
                           ^
       error: not found: value unequal

scala> val unequalAndLess= unequals & isLess
unequalAndLess: Boolean = true

scala> val defFalse= false && unequal'
                                     ^
       error: unclosed character literal

scala> val defFalse= false && unequal
                              ^
       error: not found: value unequal

scala> val defFalse= false && unequals
defFalse: Boolean = false

scala> val x=10
x: Int = 10

scala> var y=20
y: Int = 20

scala> var num=5
num: Int = 5

scala> if (num < x || {y=y+1; y==21}) print("true") else prin("false")
                                                         ^
       error: not found: value prin

scala> if (num < x || {y=y+1; y==21}) print("true") else print("false")
true
scala> print(y)
20
scala> val x:Byte=10
x: Byte = 10

scala> val y:Byte=20
y: Byte = 20

scala> val z=x+y
z: Int = 30

scala> val z=x.+(y).toByte
z: Byte = 30

scala> x.y.toByte
         ^
       error: value y is not a member of Byte

scala> x+y.toByte
res45: Int = 30

scala> val z:Byte=x+y
                   ^
       error: type mismatch;
        found   : Int
        required: Byte

scala> c=20
       ^
       error: not found: value c

scala> val c=20
c: Int = 20

scala> val z:Byte=x+c.toByte
                   ^
       error: type mismatch;
        found   : Int
        required: Byte

scala> val z:Byte=(x+y).toByte
z: Byte = 30

scala> val z=(x+y).asInstanceOf[Byte]
z: Byte = 30

scala> val x:Byte=127
x: Byte = 127

scala> val x:Byte=128
                  ^
       error: type mismatch;
        found   : Int(128)
        required: Byte
Range

Expressions:
============
scala> history
       ^
       error: not found: value history

scala> val msg=(num %2 ==0) match{
     | case true => s"$num is even"
     | case false => s"$num is false"}
                ^
       error: not found: value num
       case true => s"$num is even"
                       ^
On line 2: error: not found: value num
       case false => s"$num is false"}
                        ^
On line 3: error: not found: value num

scala> val result = day match{
     |
     |
You typed two blank lines.  Starting a new command.

scala>

scala> val day="MON"
day: String = MON

scala> val res= day match{
     | case "MON"|"SAT" => "Weekday"
     | case "SUN" => "Weekend"
     | }
res: String = Weekday

scala> val result= if(10%2 == 0) "Even"
result: Any = Even

scala> val mark=55
mark: Int = 55

scala> if (mark<40) printf("fail") else if (mark>40 && mark <60) printf("pass") else print("Excellent")
pass
scala> var mark=55
mark: Int = 55

scala> if (mark<40) printf("fail") else if (mark>40 && mark <60) printf("pass") else print("Excellent")
pass
scala> mark=40
mutated mark

scala> if (mark<40) printf("fail") else if (mark>40 && mark <60) printf("pass") else print("Excellent")
Excellent
scala> mark=38
mutated mark

scala> if (mark<40) printf("fail") else if (mark>40 && mark <60) printf("pass") else print("Excellent")
fail
scala> var mark=80
mark: Int = 80

scala> if (mark<40) printf("fail") else if (mark>40 && mark <60) printf("pass") else print("Excellent")
Excellent
scala> "Hello, " ++ "Scala!"
res6: String = Hello, Scala!

scala> var sum=1+2
sum: Int = 3

scala> var msg="Hello"
msg: String = Hello

scala> msg.subStr(3)
           ^
       error: value subStr is not a member of String

scala> msg.subString(3)
           ^
       error: value subString is not a member of String
       did you mean substring?

scala> msg.substring(3)
res9: String = lo

scala> msg substring 4
res10: String = o

scala> msg substring 2,4
                      ^
       error: ';' expected but ',' found.

scala> msg substring(2,4)
res11: String = ll

scala> var num=-100
     |
     |
You typed two blank lines.  Starting a new command.

prefix
++++++++
scala> var num = -100
num: Int = -100

scala> 100.unary_
           ^
       error: value unary_ is not a member of Int
       did you mean unary_+, unary_-, or unary_~?

scala> 100.unary_+
res13: Int = 100

scala> 100.unary_~
res14: Int = -101

scala> 100.unary_+
res15: Int = 100

scala> var flag =!true
     |
     |
You typed two blank lines.  Starting a new command.

scala> var flag= !true
flag: Boolean = false

scala> var number=(100).unary_-
number: Int = -100

scala> class emp(empname:String, empSal:Int, empAge:Int){
     | class emp(empname:String, empSal:Int, empAge:Int)


class Employee(empname: String,empSal:Int,empType:String){
def unary_!():Boolean={empType.equalsIgnoreCase("Perm")}
def unary_*():Int={empSal*2}
}

object Demo1{
def main(args:Array[String]):Unit={
val emp=new Employee("vani",5000,"Perm")
println(!emp)
println(emp.unary_*())
}
}
Postfix
++++++++
C:\Users\Yoga 520\Documents\Scala>scala Demo1
No such file or class on classpath: Demo1

C:\Users\Yoga 520\Documents\Scala>scalac Demo1.scala

C:\Users\Yoga 520\Documents\Scala>scala Demo1
true
10000

C:\Users\Yoga 520\Documents\Scala>scala
Welcome to Scala 2.13.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_231).
Type in expressions for evaluation. Or try :help.

scala> var num=100
num: Int = 100

scala> var num2=num.tolong
                    ^
       error: value tolong is not a member of Int
       did you mean toLong?

scala> var num2=num.toLong
num2: Long = 100

scala> var num2=num.toLong()
                          ^
       error: Long does not take parameters

scala> var num2=num toLong()
                    ^
       error: Long does not take parameters

scala> import scala.language.postfixOps
import scala.language.postfixOps

scala> var num2=num toLong
num2: Long = 100

